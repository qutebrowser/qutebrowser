#!/usr/bin/env python3
# vid is a userscript for qutebrowser,
# which offers commands to play videos with mpv
# Copyright (C) 2017  Nico Baeurer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""Usage: vid COMMAND [options] [URL ...]

Userscript examples:
    :spawn --userscript /path/to/vid choose
    :spawn --userscript /path/to/vid choose -p -o
    :spawn --userscript /path/to/vid play -p -o
    :spawn --userscript /path/to/vid play -p -o "https://some.com/url"

Alias examples:
    c.aliases.update({
        # plays a video in qutebrowsers window
        'play': 'spawn --userscript ' +
                '~/.local/share/qutebrowser/misc/vid play --overlay',
        # plays a video in new window
        'play-new': 'spawn --userscript ' +
                    '~/.local/share/qutebrowser/misc/vid play',
        # plays a video at the right bottom of the screen
        'play-picture': 'spawn --userscript ' +
                        '~/.local/share/qutebrowser/misc/vid play --picture',
        # displays videos-, iframe-, ... -urls,
        # tries to play the choosen video at the right bottom of the screen
        'choose-video': 'spawn --userscript ' +
                        '~/.local/share/qutebrowser/misc/vid choose --picture',
        # and so on..
    })

Commands:
    copy    List urls in qutebrowser, copies the choosen one
    choose  List urls in qutebrowser, plays the choosen one
    play    Play a video using the html code, stop after first success

Options:
    -p, --picture  X11 only: Picture-in-picture mode,
                             instance will be changed to 'picture-in-picture'
    -o, --overlay  X11 only: Use qutebrowsers window to play the video
    -s, --stay     Keep the window open after the video ended
    -l, --loop     Repeat the video

License:
    vid  Copyright (C) 2017  Nico Baeurer
    This program comes with ABSOLUTELY NO WARRANTY.
    This is free software, and you are welcome to redistribute it
    under certain conditions.
"""
import os
import sys
import bs4
import re
import docopt
import sys
import itertools
import subprocess


class StaticGetAttrType(type):
    """Metaclass which simply allows class to define
    a __getstaticattr__ method.
    __getstaticattr__ is the static equivalent of __getattr__.
    """
    def __getattr__(cls, name):
        return cls.__getstaticattr__(name)


class Qenv(metaclass=StaticGetAttrType):
    """Helper class which allows to
    access qutebrowsers environment variables"""
    def __getstaticattr__(name):
        return os.environ['QUTE_' + name.upper()]


class Params(metaclass=StaticGetAttrType):
    """Helper class which allows to access passed arguments"""
    # lambda needed to access the right docstring
    __dict = docopt.docopt((lambda: __doc__)())

    def __getstaticattr__(name):
        return Params.__dict[name if name in Params.__dict
                             else '--' + name]


def read(path):
    """Reads every line of a file

    Returns:
        content

    Raises:
        IOError: any Exception raised by open e.g.
                 FileNotFoundError, PermissionError, ...
    """
    with open(path) as f:
        return '\n'.join(f.readlines())


def qexec(cmd, *fmt_args, **fmt_kwargs):
    """Executes qutebrowser commands"""
    with open(Qenv.fifo, 'w') as f:
        f.write(cmd.format(*fmt_args, **fmt_kwargs) +
                "\n")


def info(text):
    """Displays an info text in qutebrowser"""
    qexec('message-info "{}"', text)


def jseval(text):
    """Executes javascript code on the associated site"""
    qexec('jseval {}', text)


def error(text):
    """Displays an error text in qutebrowser"""
    qexec('message-error "{}"', text)


def escape(text):
    """Escapes suggestions"""
    for k, v in (('\\', '\\\\'), (',', '\\,'), (';', '\\;')):
        text = text.replace(k, v)
    return text


def suggest(cmd, choices, **fmt_kwargs):
    """Displays suggestions in qutebrowser

    Args:
        cmd (str):    Qutebrowser command
        choices ((str, ...), ...):
                      Suggestions as iterables
        **fmt_kwargs: cmd's format kwargs
    """
    qexec(":set-cmd-text :suggest '{scmd}' '{choices}' '",
          scmd=cmd.format(**fmt_kwargs),
          choices=';'.join(','.join(escape(col) for col in row)
                           for row in choices))


def extract_videos():
    """Extracts the urls from the source code

    Return:
        (url, tag-name)
    """
    soup = bs4.BeautifulSoup(read(Qenv.html))
    elems = soup.find_all(["video", "iframe", "source"],
                          src=re.compile(r"(?!javascript).+"))
    return itertools.chain(
        ((Qenv.url, 'main-frame'),),
        ((re.sub('^//', 'https://', e.attrs['src']), e.name)
         for e in elems))


def choose():
    """List urls in qutebrowser, plays the choosen one"""
    suggest(':spawn --userscript {path} play {args}',
            extract_videos(),
            path=sys.argv[0],
            args=' '.join(sys.argv[2:]))


def copy():
    """List urls in qutebrowser, copies the choosen one"""
    if not Params.URL:
        suggest(':spawn --userscript {path} copy {args}',
                extract_videos(),
                path=sys.argv[0],
                args=' '.join(sys.argv[2:]))
        return

    info('Copying ' + Params.URL[0])

    try:
        import pyperclip
        pyperclip.copy(Params.URL[0])
    except ModuleNotFoundError:
        error('Failure: pyperclip required')


def play():
    """Plays a video according to the command line arguments"""
    urls = Params.URL or (url for url, tag in extract_videos())
    player_args = ['mpv', '--force-window', '--no-terminal', '--ytdl']

    if Params.loop:
        player_args.append('--loop-file')
    if Params.stay:
        player_args.append('--keep-open=yes')
    if Params.overlay:
        player_args += ['--wid', Qenv.native_wid]
    if Params.picture:
        player_args += [
            '--ontop',
            '--on-all-workspaces',
            '--geometry={width}x{height}-+{x}-+{y}'.format(
                width=400, height=200, x=20, y=20),
            '--x11-name', 'picture-in-picture'
        ]

    jseval('for (let i of document.getElementsByTagName("video")) i.pause();')

    for url in urls:
        info("Opening '{}' with mpv".format(url))
        fallback = None
        if re.match("^https?://(www.)?youtube\.", url):
            # fuck country based take downs
            # note: youtube-dl supports hooktube in a wrong way,
            #       it simply converts the url to a youtube url..
            #       So it destroys the purpose of hooktube....
            #       However luckily their regex pattern doesn't treat
            #       urls with redundant slashes as it should:
            #       in the same way as without them
            #       So we can simply fix this behaviour by
            #       converting https://youtube.com/watch?v=id
            #       to https://hooktube.com//embed/id
            fallback = url.replace('youtube', 'hooktube') \
                .replace('watch?v=', '/embed/')
        if (not subprocess.call(player_args + [url]) or
                (fallback and
                    not subprocess.call(player_args + [fallback]))):
            break
        error("Failed to play '{}'".format(url))
    else:
        error("Found no playable url, sorry")


if __name__ == '__main__':
    globals()[Params.COMMAND]()
