#!/usr/bin/env python
#
# Executes python-readability on current page and opens the summary as new tab.
#
# Depends on the python-readability package, or its fork:
#
#   - https://github.com/buriy/python-readability
#   - https://github.com/bookieio/breadability
#
# Usage:
#   :spawn --userscript readability
#
import os
import xml.etree.ElementTree as ET

# Styling for dynamic window margin scaling and line height
HEADER = """
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, text/html, charset=UTF-8" http-equiv="Content-Type">
    </meta>
    <title>%s</title>
    <style type="text/css">
        body {
            margin: 40px auto;
            max-width: 650px;
            line-height: 1.4;
            padding: 0 10px;
        }
        h1, h2, h3 {
            line-height: 1.2;
        }
    </style>
</head>
"""

def remove_tags(xml, tags):
    for elem in xml.iter():
        for child in list(elem):
            if child.tag in tags:
                elem.remove(child)

tmpfile = os.path.join(
    os.environ.get('QUTE_DATA_DIR',
                   os.path.expanduser('~/.local/share/qutebrowser')),
    'userscripts/readability.html')

if not os.path.exists(os.path.dirname(tmpfile)):
    os.makedirs(os.path.dirname(tmpfile))

with open(os.environ['QUTE_HTML'], 'r', encoding='UTF-8') as source:
    data = source.read()

try:
    from breadability.readable import Article as reader
    doc = reader(data)
    title = doc._original_document.title
    content = HEADER % title + doc.readable + '</html>'
except ImportError:
    from readability import Document
    doc = Document(data)
    title = doc.title()
    content = doc.summary().replace('<html>', HEADER % title)

xml = ET.fromstring(content)
# SVGs often look odd. Better remove them.
tags = ['svg', 'button', 'input']
remove_tags(xml, tags)

with open(tmpfile, 'wb') as target: 
    # When breadability is eventually depecrecated one day, write full HEADER here
    # xml.etree removes DOCTYPE declarations
    target.write("<!DOCTYPE html>\n".encode("UTF-8"))
    ET.ElementTree(xml).write(target, "UTF-8", xml_declaration=False, method='html')

with open(os.environ['QUTE_FIFO'], 'w') as fifo:
    fifo.write('open -t %s' % tmpfile)
