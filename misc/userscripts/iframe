#!/usr/bin/env python3
# iframe is a userscript for qutebrowser,
# it's an example / proof of work script for the suggest command
# iframe searches every iframe of the current website
# and offers to navigate to it
# Copyright (C) 2017  Nico Baeurer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""Usage: iframe [OPTIONS ...]

Userscript examples:
    :spawn --userscript /path/to/iframe

Arguments:
    OPTIONS  arguments to append after ':open ',
             e.g. "-t" to open the iframe in a new tab
"""
import os
import sys
import bs4
import re


class StaticGetAttrType(type):
    """Metaclass which simply allows class to define
    a __getstaticattr__ method.
    __getstaticattr__ is the static equivalent of __getattr__.
    """
    def __getattr__(cls, name):
        return cls.__getstaticattr__(name)


class Qenv(metaclass=StaticGetAttrType):
    """Helper class which allows to
    access qutebrowsers environment variables"""
    def __getstaticattr__(name):
        return os.environ['QUTE_' + name.upper()]


def read(path):
    """Reads every line of a file

    Return:
        content or None
    """
    with open(path) as f:
        return '\n'.join(f.readlines())


def qexec(cmd, *fmt_args, **fmt_kwargs):
    """Executes qutebrowser commands"""
    with open(Qenv.fifo, 'w') as f:
        f.write(cmd.format(*fmt_args, **fmt_kwargs) +
                "\n")


def escape(text):
    """Escapes suggestions"""
    for k, v in (('\\', '\\\\'), (',', '\\,'), (';', '\\;')):
        text = text.replace(k, v)
    return text


def suggest(cmd, choices, **fmt_kwargs):
    """Displays suggestions in qutebrowser

    Args:
        cmd (str):    Qutebrowser command
        choices ((str, ...), ...):
                      Suggestions as iterables
        **fmt_kwargs: cmd's format kwargs
    """
    qexec(":set-cmd-text :suggest '{scmd}' '{choices}' '",
          scmd=cmd.format(**fmt_kwargs),
          choices=';'.join(','.join(escape(col) for col in row)
                           for row in choices))


if __name__ == '__main__':
    soup = bs4.BeautifulSoup(read(Qenv.html))
    elems = soup.find_all(["iframe"], src=re.compile(r"(?!javascript).+"))

    suggest(":open {options}",
            ((re.sub('^//', 'https://', e.attrs['src']),) for e in elems),
            options=" ".join(sys.argv[1:]))
